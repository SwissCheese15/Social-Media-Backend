# The stages are executed in the following order
stages:
  - pull
  - build
  - lint
  - push
  - deploy
  - cleanup

# makes sure the docker login is taken care of so the pipeline can start
before_script:
  - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"

# pulling the current image from the container repository
pull:
  stage: pull
  # allow failure so that the pipeline runs through when we build for the first time. Can be removed after.
  allow_failure: True
  script:
    - docker pull "$CI_REGISTRY_IMAGE":latest

# builds an image with the pipeline id as a name and the tag ???
# cache-from uses the before pulled image to compare and only change the altered parts
build:
  stage: build
  script:
    - docker build --tag="$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" --cache-from="$CI_REGISTRY_IMAGE":latest .

# Linting (Quality Control)
lint:
  stage: lint
  allow_failure: True
  only:
    - master
  script:
    # passing in the name and tag of the current image
    - export CI_PIPELINE_ID=$CI_PIPELINE_ID
    - export CI_BUILD_REF_NAME=$CI_COMMIT_REF_NAME
    # add name "backend" or whatever after "run"
    # watch out! docker compose version 1 or 2.. Diffrent syntax for the following line.
    - docker compose -p "$CI_PIPELINE_ID" -f docker-compose.ci.yml run backend flake8 .

push master:
  stage: push
  only:
    - master
    - tags
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":"$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_REF_NAME"

push latest:
  stage: push
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":latest
    - docker push "$CI_REGISTRY_IMAGE":latest

deploy:
  stage: deploy
  when: manual
  script:
    - docker-compose -f docker-compose.deploy.yml pull
    - docker-compose -f docker-compose.deploy.yml down --remove-orphans
    - docker-compose -f docker-compose.deploy.yml up -d

cleanup:
  stage: cleanup
  when: always
  script:
    - docker rmi -f "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME"
    - docker-compose -p "$CI_PIPELINE_ID" -f docker-compose.ci.yml down --remove-orphans

